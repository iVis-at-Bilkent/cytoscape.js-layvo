!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.cytoscapeLayvo=e():t.cytoscapeLayvo=e()}(window,function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e){t.exports=function(){let t=this;return{generalProperties:()=>n(t),differenceMetrics:i}};let n=function(t){let e=a(t);return{numberOfEdgeCrosses:o(t),numberOfNodeOverlaps:r(t),totalArea:u(t),totalEdgeLength:e,averageEdgeLength:e/t.edges().length}},o=function(t){let e=function(t,e,n,o,r,u,a,i){var f,c,l;return 0!==(f=(n-t)*(i-u)-(a-r)*(o-e))&&(c=((e-o)*(a-t)+(n-t)*(i-e))/f,.01<(l=((i-u)*(a-t)+(r-a)*(i-e))/f)&&l<.99&&.1<c&&c<.99)},n=0,o=t.edges().toArray();for(let t=0;t<o.length;t++)for(var r=o[t].sourceEndpoint(),u=o[t].targetEndpoint(),a=t+1;a<o.length;a++){var i=o[a].sourceEndpoint(),f=o[a].targetEndpoint();e(r.x,r.y,u.x,u.y,i.x,i.y,f.x,f.y)&&n++}return n},r=function(t){let e=function(t,e){let n=t.boundingBox(),o=e.boundingBox();return!(o.x1>n.x2||o.x2<n.x1||o.y1>n.y2||o.y2<n.y1)},n=0,o=t.nodes().toArray();for(let t=0;t<o.length;t++){let r=o[t];for(let u=t+1;u<o.length;u++){e(r,o[u])&&n++}}return n},u=function(t){let e=t.elements().boundingBox();return e.w*e.h},a=function(t){let e=function(t,e){let n=e.x-t.x,o=e.y-t.y;return Math.sqrt(n*n+o*o)},n=0,o=t.edges().toArray();for(let t of o){n+=e(t.sourceEndpoint(),t.targetEndpoint())}return n},i=function(t,e){return t.fit(50),e.fit(50),t.zoom()>e.zoom()?(t.zoom(e.zoom()),t.pan(e.pan())):(e.zoom(t.zoom()),e.pan(t.pan())),{averageDistanceBetweenGraphs:f(t,e),orthogonalOrdering:c(t,e)}},f=function(t,e){let n=0,o=0;return t.nodes().forEach(function(t){let r=e.getElementById(t.id());r.length&&(o++,n+=function(t,e){let n=e.x-t.x,o=e.y-t.y;return Math.sqrt(n*n+o*o)}(t.renderedPosition(),r.renderedPosition()))}),o?n/o:0},c=function(t,e){let n=function(t){let e=t.targetEndpoint().x-t.sourceEndpoint().x,n=t.targetEndpoint().y-t.sourceEndpoint().y,o=Math.atan2(e,n);return o<0?o+2*Math.PI:o},o=function(t,e,n){if(t%Math.PI>Math.PI/4){let t=-4/Math.PI,o=2,r=Math.PI/2,u=Math.floor(n/r)-Math.floor(e/r),a=0,i=2+e%r*t,f=2+n%r*t;return u>0?(a=r*(u-1),a+=(r-e%r)*i/2,a+=(o+f)/2*(n%r)):a+=(i+f)/2*((n-e)%r),a}{let t=4/Math.PI,o=2,r=Math.PI/2,u=Math.floor(n/r)-Math.floor(e/r),a=r*Math.floor((n-e)/r),i=e%r*t,f=n%r*t;return u>0?(a=r*(u-1),a+=(r-e%r)*(o+i)/2,a+=f*(n%r)/2):a+=(i+f)/2*((n-e)%r),a}},r=function(t,e){let r=0,u=n(t),a=n(e);u>a&&([u,a]=[a,u]);let i=0;for(;i!=a;)(i=Math.PI/4*(Math.floor(u/(Math.PI/4))+1))>a&&(i=a),u%Math.PI/2>Math.PI/4?r+=o(5,u,i):r+=o(0,u,i),u=i;return r},u=0,a=0;return t.edges().forEach(function(t){let n=e.getElementById(t.id());n.length&&(a++,u+=Math.min(r(t,n),r(n,t)))}),console.log(u),a?u/a:0}},function(t,e,n){const o=n(0);let r=function(t){t&&t("core","layvo",o)};"undefined"!=typeof cytoscape&&r(cytoscape),t.exports=r}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,