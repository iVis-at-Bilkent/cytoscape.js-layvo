!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.cytoscapeLayvo=e():t.cytoscapeLayvo=e()}(window,function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e){t.exports=function(){let t=this;return{generalProperties:()=>n(t),differenceMetrics:a}};let n=function(t){let e=i(t);return{numberOfEdgeCrosses:o(t),numberOfNodeOverlaps:r(t),totalArea:u(t),totalEdgeLength:e,averageEdgeLength:e/t.edges().length}},o=function(t){let e=0,n=t.edges().toArray();for(let t=0;t<n.length;t++){let a=n[t].sourceEndpoint(),f=n[t].targetEndpoint();for(let l=t+1;l<n.length;l++){let t=n[l].sourceEndpoint(),c=n[l].targetEndpoint();o=a.x,r=a.y,u=f.x,i=f.y,a=t.x,f=t.y,t=c.x,c=c.y,d=void 0,s=void 0,p=void 0,0!=(d=(u-o)*(c-f)-(t-a)*(i-r))&&(s=((r-i)*(t-o)+(u-o)*(c-r))/d,0<(p=((c-f)*(t-o)+(a-t)*(c-r))/d)&&p<1&&0<s&&s<1)&&e++}}var o,r,u,i,a,f,l,c,d,s,p;return e},r=function(t){let e=function(t,e){let n=t.boundingBox(),o=e.boundingBox();return!(o.x1>n.x2||o.x2<n.x1||o.y1>n.y2||o.y2<n.y1)},n=0,o=t.nodes().toArray();for(let t=0;t<o.length;t++){let r=o[t];for(let u=t+1;u<o.length;u++){e(r,o[u])&&n++}}return n},u=function(t){let e=t.elements().boundingBox();return e.w*e.h},i=function(t){let e=function(t,e){let n=e.x-t.x,o=e.y-t.y;return Math.sqrt(n*n+o*o)},n=0,o=t.edges().toArray();for(let t of o){n+=e(t.sourceEndpoint(),t.targetEndpoint())}return n},a=function(t,e){return t.fit(50),e.fit(50),t.zoom()>e.zoom()?(t.zoom(e.zoom()),t.pan(e.pan())):(e.zoom(t.zoom()),e.pan(t.pan())),{averageDistanceBetweenGraphs:f(t,e),orthogonalOrdering:l(t,e)}},f=function(t,e){let n=0,o=0;return t.nodes().forEach(function(t){let r=e.getElementById(t.id());r.length&&(o++,n+=function(t,e){let n=e.x-t.x,o=e.y-t.y;return Math.sqrt(n*n+o*o)}(t.renderedPosition(),r.renderedPosition()))}),o?n/o:0},l=function(t,e){let n=function(t){let e=t.targetEndpoint().x-t.sourceEndpoint().x,n=t.targetEndpoint().y-t.sourceEndpoint().y,o=Math.atan2(e,n);return o<0?o+2*Math.PI:o},o=function(t,e,n){if(t%Math.PI>Math.PI/4){let t=-4/Math.PI,o=2,r=Math.PI/2,u=Math.floor(n/r)-Math.floor(e/r),i=0,a=2+e%r*t,f=2+n%r*t;return u>0?(i=r*(u-1),i+=(r-e%r)*a/2,i+=(o+f)/2*(n%r)):i+=(a+f)/2*((n-e)%r),i}{let t=4/Math.PI,o=2,r=Math.PI/2,u=Math.floor(n/r)-Math.floor(e/r),i=r*Math.floor((n-e)/r),a=e%r*t,f=n%r*t;return u>0?(i=r*(u-1),i+=(r-e%r)*(o+a)/2,i+=f*(n%r)/2):i+=(a+f)/2*((n-e)%r),i}},r=function(t,e){let r=0,u=n(t),i=n(e);u>i&&([u,i]=[i,u]);let a=0;for(;a!=i;)(a=Math.PI/4*(Math.floor(u/(Math.PI/4))+1))>i&&(a=i),u%Math.PI/2>Math.PI/4?r+=o(5,u,a):r+=o(0,u,a),u=a;return r},u=0,i=0;return t.edges().forEach(function(t){let n=e.getElementById(t.id());n.length&&(i++,u+=Math.min(r(t,n),r(n,t)))}),console.log(u),i?u/i:0}},function(t,e,n){const o=n(0);let r=function(t){t&&t("core","layvo",o)};"undefined"!=typeof cytoscape&&r(cytoscape),t.exports=r}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,